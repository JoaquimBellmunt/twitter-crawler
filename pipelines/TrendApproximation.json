{
    "config_path": "pipelines/TrendApproximation.json",
    "default_config": {
        "distance_root_folder": "/mnt/idms/fberes/network/combined_occ/experiments//rg17_20171218_hashmax20000_8000_en-players_3h-plus2h_accurate/models/distance/",
        "experiment_dir": "/mnt/idms/fberes/network/combined_occ/experiments//rg17_20171218_hashmax20000_8000_en-players_3h-plus2h_accurate",
        "experiment_id": "rg17_20171218_hashmax20000_8000_en-players_3h-plus2h_accurate",
        "experiment_prefix": "/mnt/idms/fberes/network/combined_occ/experiments/",
        "flink_outs_prefix": "/mnt/idms/fberes/network/combined_occ/flink_jobs/outputs/",
        "frequency_weight": 0.0,
        "keywords_for_eval_path": "/mnt/idms/fberes/network/combined_occ/eval_keywords.csv",
        "player_name_with_accounts_file_path": "/mnt/idms/fberes/network/online_ranker/roland_garros_updated_schedule/filtered_true_matches.json",
        "player_names_file_path": "/mnt/idms/fberes/network/combined_occ/player_name_parts.txt",
        "player_screen_names_file_path": "/mnt/idms/fberes/network/online_ranker/roland_garros_updated_schedule/filtered_true_matches_screen_names.json",
        "relevance_subset": "discriminative",
        "relevance_type": "multi",
        "schedule_file_path": "/mnt/idms/fberes/network/roland_garros/data/schedule_new_df.csv",
        "score_c_vals": [
            0,
            1,
            2,
            5,
            8,
            10
        ],
        "snapshot_weight": 0.5,
        "stemmed_tweet_file_path": "/mnt/idms/fberes/network/roland_garros/data/rg17_tweets_eng_stemmed.csv",
        "stop_words_file_path": "/mnt/idms/fberes/network/combined_occ/stop_words_en.txt",
        "time_hour_vals": [
            1,
            4,
            7,
            10,
            13,
            16,
            19,
            22
        ],
        "unstemmed_tweet_file_path": "/mnt/idms/fberes/network/roland_garros/data/rg17_tweets_eng.csv",
        "w2v_model_dim": 100,
        "w2v_root_folder": "/mnt/idms/fberes/network/combined_occ/experiments//rg17_20171218_hashmax20000_8000_en-players_3h-plus2h_accurate/models/w2v/",
        "word_corpus": "/mnt/idms/fberes/network/roland_garros/data/rg17_8000_important_en_words_plus_players.txt"
    },
    "description": "Pipeline for word co-occurrence analysis.",
    "id": "7",
    "name": "TrendApproximation",
    "notebooks": [
        {
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "FilterRelevantWords",
            "path": "ipython/rg17/TfIdfFilter.ipynb",
            "pipeline_status": "off",
            "type": "Preprocessor"
        },
        {
            "dependencies": [
                "FilterRelevantWords"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "CoOccurenceDataFormatter",
            "path": "ipython/rg17/RG17_combined_occurences.ipynb",
            "pipeline_status": "on",
            "type": "Preprocessor"
        },
        {
            "dependencies": [
                "CoOccurenceDataFormatter"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "AverageCoOccurences",
            "path": "ipython/rg17/AverageCoOccurences.ipynb",
            "pipeline_status": "on",
            "type": "Statistics"
        },
        {
            "dependencies": [
                "FilterRelevantWords"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "GlobalWord2Vec",
            "path": "ipython/rg17/Word2Vec.ipynb",
            "pipeline_status": "off",
            "type": "Word2Vec"
        },
        {
            "dependencies": [
                "FilterRelevantWords"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "W2VecBaseline",
            "path": "ipython/rg17/W2VecBaseline.ipynb",
            "pipeline_status": "on",
            "type": "Word2Vec"
        },
        {
            "dependencies": [
                "AverageCoOccurences",
                "W2VecBaseline",
                "BaselineDistances"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "ToplistEvaluatorFinals",
            "path": "ipython/rg17/ToplistEvaluatorFinals.ipynb",
            "pipeline_status": "on",
            "type": "Evaluator"
        },
        {
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "TrendApproxParams",
            "path": "pipelines/TrendApproxParams.ipynb",
            "pipeline_status": "off",
            "type": "Parameters"
        },
        {
            "dependencies": [
                "CoOccurenceDataFormatter"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "BaselineDistances",
            "path": "ipython/rg17/BaselineDistances.ipynb",
            "pipeline_status": "on",
            "type": "Baseline"
        },
        {
            "dependencies": [
                "AverageCoOccurences",
                "W2VecBaseline",
                "BaselineDistances"
            ],
            "is_clone": "no",
            "kernel_type": "py3-env",
            "name": "ToplistEvaluatorGeneral",
            "path": "ipython/rg17/ToplistEvaluatorGeneral.ipynb",
            "pipeline_status": "on",
            "type": "Evaluator"
        }
    ],
    "py_scripts": [],
    "reports": [
        {
            "date": "2017-11-17",
            "id": "changing_r_member_weights_2017-11-17",
            "kernel_status": "active",
            "name": "changing_r_member_weights",
            "note": "I introduced \"frequency_val\" into \"r\". I was experimenting with the combination weights. There are no major differences in performance. We must not assign 1.0 weight to \"frequency_val\". This would result inf \"norm_c\" scores when \"r\" = \"frequency_val\" = 0!  ",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-11-16",
            "id": "rayleigh_revisited_2017-11-16",
            "kernel_status": "active",
            "name": "rayleigh_revisited",
            "note": "I used rayleigh again. Discriminative models improve a lot. occ_score is better than norm.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-11-15",
            "id": "eval_reaults_with_c_less_manipulation_2017-11-15",
            "kernel_status": "active",
            "name": "eval_reaults_with_c_less_manipulation",
            "note": "",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-11-14",
            "id": "eval_results_with_new_norm_c_2017-11-14",
            "kernel_status": "active",
            "name": "eval_results_with_new_norm_c",
            "note": "These are the first results realted to Andras ideas (rel_count, global, snapshot refactors). 3 types of evaluations were measures (positive, binary, discriminative). Norm_c is the best (except for discriminative).",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-11-11",
            "id": "multiple_const_values_2017-11-11",
            "kernel_status": "active",
            "name": "multiple_const_values",
            "note": "norm model performance did not improve significantly due to const_score in rel_count... ",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-11-11",
            "id": "results_with_refactored_preproc_2017-11-11",
            "kernel_status": "active",
            "name": "results_with_refactored_preproc",
            "note": "After I refactored the stemming and text cleaning. The ndcg-s improved a lot (for all models). Now jaccard is the best model. In AverageCoOccurences notebook the rel_count distribution looks better for c=5,10.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-27",
            "id": "long_run_2017-10-27",
            "kernel_status": "active",
            "name": "long run",
            "note": "AverageCoOccurences-nak volt zero division error-ja. BaselineDistances sok mem\u00f3ri\u00e1t eszik. Nem k\u00e9ne tarolni semmit! mindent rogton ki k\u00e9ne irnom!!!",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-27",
            "id": "detailed_experiment_for_parameters_2017-10-27",
            "kernel_status": "active",
            "name": "detailed_experiment_for_parameters",
            "note": "Jaccard improved a lot from random shuffle. If eps is not zero then there are difference between norm alpha version. The order is always the same 0, 1, 2, 5 for discriminative, signed and positive as well. It is interesting why big alphas are better. norm performance decreases as c get bigger. The results are the best for the signed case. Frequent words are unfortunately still in the toplists...",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-27",
            "id": "rel_count_modified_2017-10-27",
            "kernel_status": "active",
            "name": "rel_count_modified",
            "note": "Based on Andras idea we use constant for relative count calculation.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-26",
            "id": "3_version_of_evaluation_2017-10-26",
            "kernel_status": "active",
            "name": "3_version_of_evaluation",
            "note": "discriminative, signed and positive evaluation.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-26",
            "id": "occ_score_plus_rayleigh_2017-10-26",
            "kernel_status": "active",
            "name": "occ_score_plus_rayleigh",
            "note": "I was experimenting with occ_score + rayleigh. It has almost as good performance as former rayleigh version.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-25",
            "id": "binary_vs_multi_relevance_2017-10-25",
            "kernel_status": "active",
            "name": "binary_vs_multi_relevance",
            "note": "In this report we can see the difference between the two evaluation cases.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-23",
            "id": "occ_score_without_popular_discrimination_2017-10-23",
            "kernel_status": "active",
            "name": "occ_score without popular discrimination",
            "note": "Changing the constant in the occ_score formula. As the constant decreases the performance of the proposed score is getting worse :( BUT the alpha order is stable for low c=0.01 for example.",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        },
        {
            "date": "2017-10-23",
            "id": "occ_score_with_popular_discrimination_2017-10-23",
            "kernel_status": "active",
            "name": "occ_score with popular discrimination",
            "note": "Changing the constant in the occ_score formula. As the constant decreases the performance of the proposed score is getting worse :(",
            "save_for_remote": "active",
            "type": "local",
            "user": "fberes"
        }
    ]
}